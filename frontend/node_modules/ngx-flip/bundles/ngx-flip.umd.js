(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-flip', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ngx-flip'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FlipComponent = (function () {
        function FlipComponent(renderer) {
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        FlipComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.rotate();
            };
        /**
         * @param {?} change
         * @return {?}
         */
        FlipComponent.prototype.ngOnChanges = /**
         * @param {?} change
         * @return {?}
         */
            function (change) {
                this.rotate();
            };
        /**
         * @return {?}
         */
        FlipComponent.prototype.rotate = /**
         * @return {?}
         */
            function () {
                if (this.flip) {
                    this.renderer.addClass(this.flipContainer.nativeElement, 'rotate');
                }
                else {
                    this.renderer.removeClass(this.flipContainer.nativeElement, 'rotate');
                }
            };
        FlipComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-flip',
                        template: "<div class=\"flipper\" #flipContainer>\n<div class=\"front\">\n  <ng-content select=\"[front]\" ></ng-content>\n</div>\n  <div class=\"back\">\n  <ng-content select=\"[back]\" ></ng-content>\n  </div>\n</div>\n\n",
                        styles: [":host{-webkit-perspective:1000px;perspective:1000px;display:block}:host .flipper{transition:.6s;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;height:100%;width:100%;position:relative}:host .back,:host .front{width:100%;height:100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;position:absolute;top:0;left:0}:host .front{z-index:2;-webkit-transform:rotateY(0);transform:rotateY(0)}:host .back{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}:host .rotate{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}"],
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        FlipComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 }
            ];
        };
        FlipComponent.propDecorators = {
            flipContainer: [{ type: core.ViewChild, args: ['flipContainer',] }],
            flip: [{ type: core.Input }]
        };
        return FlipComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FlipModule = (function () {
        function FlipModule() {
        }
        FlipModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        exports: [
                            FlipComponent
                        ],
                        declarations: [FlipComponent]
                    },] },
        ];
        return FlipModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.FlipComponent = FlipComponent;
    exports.FlipModule = FlipModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZsaXAudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtZmxpcC9saWIvZmxpcC5jb21wb25lbnQudHMiLCJuZzovL25neC1mbGlwL2xpYi9mbGlwLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLFxyXG4gIFZpZXdDaGlsZFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtZmxpcCcsXHJcbiAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPVwiZmxpcHBlclwiICNmbGlwQ29udGFpbmVyPlxyXG48ZGl2IGNsYXNzPVwiZnJvbnRcIj5cclxuICA8bmctY29udGVudCBzZWxlY3Q9XCJbZnJvbnRdXCIgPjwvbmctY29udGVudD5cclxuPC9kaXY+XHJcbiAgPGRpdiBjbGFzcz1cImJhY2tcIj5cclxuICA8bmctY29udGVudCBzZWxlY3Q9XCJbYmFja11cIiA+PC9uZy1jb250ZW50PlxyXG4gIDwvZGl2PlxyXG48L2Rpdj5cclxuXHJcbmAsXHJcbiAgc3R5bGVzOiBbYDpob3N0ey13ZWJraXQtcGVyc3BlY3RpdmU6MTAwMHB4O3BlcnNwZWN0aXZlOjEwMDBweDtkaXNwbGF5OmJsb2NrfTpob3N0IC5mbGlwcGVye3RyYW5zaXRpb246LjZzOy13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOnByZXNlcnZlLTNkO3RyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZDtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlfTpob3N0IC5iYWNrLDpob3N0IC5mcm9udHt3aWR0aDoxMDAlO2hlaWdodDoxMDAlOy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowfTpob3N0IC5mcm9udHt6LWluZGV4OjI7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlWSgwKTt0cmFuc2Zvcm06cm90YXRlWSgwKX06aG9zdCAuYmFja3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGVZKDE4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZVkoMTgwZGVnKX06aG9zdCAucm90YXRley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVkoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlWSgxODBkZWcpfWBdLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGbGlwQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcclxuICB9XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2ZsaXBDb250YWluZXInKSBwcml2YXRlIGZsaXBDb250YWluZXI7XHJcbiAgQElucHV0KCkgZmxpcDogYm9vbGVhbjtcclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnJvdGF0ZSgpO1xyXG4gIH1cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2U6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIHRoaXMucm90YXRlKCk7XHJcbiAgfVxyXG4gIHJvdGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLmZsaXApIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmZsaXBDb250YWluZXIubmF0aXZlRWxlbWVudCwgJ3JvdGF0ZScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmZsaXBDb250YWluZXIubmF0aXZlRWxlbWVudCwgJ3JvdGF0ZScpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59XHJcbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEZsaXBDb21wb25lbnQgfSBmcm9tICcuL2ZsaXAuY29tcG9uZW50JztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBGbGlwQ29tcG9uZW50XHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtGbGlwQ29tcG9uZW50XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmxpcE1vZHVsZSB7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNvbXBvbmVudCIsIkNoYW5nZURldGVjdGlvblN0cmF0ZWd5IiwiUmVuZGVyZXIyIiwiVmlld0NoaWxkIiwiSW5wdXQiLCJOZ01vZHVsZSIsIkNvbW1vbk1vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO1FBc0JFLHVCQUFvQixRQUFtQjtZQUFuQixhQUFRLEdBQVIsUUFBUSxDQUFXO1NBQ3RDOzs7O1FBS0QsZ0NBQVE7OztZQUFSO2dCQUNFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNmOzs7OztRQUNELG1DQUFXOzs7O1lBQVgsVUFBWSxNQUFxQjtnQkFDL0IsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ2Y7Ozs7UUFDRCw4QkFBTTs7O1lBQU47Z0JBQ0UsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2lCQUNwRTtxQkFBTTtvQkFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztpQkFDdkU7YUFFRjs7b0JBcENGQSxjQUFTLFNBQUM7d0JBQ1QsUUFBUSxFQUFFLFVBQVU7d0JBQ3BCLFFBQVEsRUFBRSxzTkFTWDt3QkFDQyxNQUFNLEVBQUUsQ0FBQyxtakJBQW1qQixDQUFDO3dCQUM3akIsZUFBZSxFQUFFQyw0QkFBdUIsQ0FBQyxNQUFNO3FCQUNoRDs7Ozt3QkFsQitEQyxjQUFTOzs7O29DQXdCdEVDLGNBQVMsU0FBQyxlQUFlOzJCQUN6QkMsVUFBSzs7UUFpQlIsb0JBQUM7S0FBQTs7Ozs7O0FDM0NEO1FBSUE7U0FVQzs7b0JBVkFDLGFBQVEsU0FBQzt3QkFDUixPQUFPLEVBQUU7NEJBQ1BDLG1CQUFZO3lCQUNiO3dCQUNELE9BQU8sRUFBRTs0QkFDUCxhQUFhO3lCQUNkO3dCQUNELFlBQVksRUFBRSxDQUFDLGFBQWEsQ0FBQztxQkFDOUI7O1FBRUQsaUJBQUM7S0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=