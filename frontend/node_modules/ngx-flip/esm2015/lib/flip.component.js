/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input, Renderer2, ViewChild } from '@angular/core';
export class FlipComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.rotate();
    }
    /**
     * @param {?} change
     * @return {?}
     */
    ngOnChanges(change) {
        this.rotate();
    }
    /**
     * @return {?}
     */
    rotate() {
        if (this.flip) {
            this.renderer.addClass(this.flipContainer.nativeElement, 'rotate');
        }
        else {
            this.renderer.removeClass(this.flipContainer.nativeElement, 'rotate');
        }
    }
}
FlipComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-flip',
                template: `<div class="flipper" #flipContainer>
<div class="front">
  <ng-content select="[front]" ></ng-content>
</div>
  <div class="back">
  <ng-content select="[back]" ></ng-content>
  </div>
</div>

`,
                styles: [`:host{-webkit-perspective:1000px;perspective:1000px;display:block}:host .flipper{transition:.6s;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;height:100%;width:100%;position:relative}:host .back,:host .front{width:100%;height:100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;position:absolute;top:0;left:0}:host .front{z-index:2;-webkit-transform:rotateY(0);transform:rotateY(0)}:host .back{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}:host .rotate{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
FlipComponent.ctorParameters = () => [
    { type: Renderer2 }
];
FlipComponent.propDecorators = {
    flipContainer: [{ type: ViewChild, args: ['flipContainer',] }],
    flip: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FlipComponent.prototype.flipContainer;
    /** @type {?} */
    FlipComponent.prototype.flip;
    /** @type {?} */
    FlipComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxpcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZmxpcC8iLCJzb3VyY2VzIjpbImxpYi9mbGlwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFDdkUsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBaUJ2QixNQUFNOzs7O0lBRUosWUFBb0IsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztJQUN2QyxDQUFDOzs7O0lBS0QsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDOzs7OztJQUNELFdBQVcsQ0FBQyxNQUFxQjtRQUMvQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQzs7OztJQUNELE1BQU07UUFDSixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3hFLENBQUM7SUFFSCxDQUFDOzs7WUFwQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxVQUFVO2dCQUNwQixRQUFRLEVBQUU7Ozs7Ozs7OztDQVNYO2dCQUNDLE1BQU0sRUFBRSxDQUFDLG1qQkFBbWpCLENBQUM7Z0JBQzdqQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7O1lBbEIrRCxTQUFTOzs7NEJBd0J0RSxTQUFTLFNBQUMsZUFBZTttQkFDekIsS0FBSzs7OztJQUROLHNDQUFrRDs7SUFDbEQsNkJBQXVCOztJQUpYLGlDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMsXHJcbiAgVmlld0NoaWxkXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1mbGlwJyxcclxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJmbGlwcGVyXCIgI2ZsaXBDb250YWluZXI+XHJcbjxkaXYgY2xhc3M9XCJmcm9udFwiPlxyXG4gIDxuZy1jb250ZW50IHNlbGVjdD1cIltmcm9udF1cIiA+PC9uZy1jb250ZW50PlxyXG48L2Rpdj5cclxuICA8ZGl2IGNsYXNzPVwiYmFja1wiPlxyXG4gIDxuZy1jb250ZW50IHNlbGVjdD1cIltiYWNrXVwiID48L25nLWNvbnRlbnQ+XHJcbiAgPC9kaXY+XHJcbjwvZGl2PlxyXG5cclxuYCxcclxuICBzdHlsZXM6IFtgOmhvc3R7LXdlYmtpdC1wZXJzcGVjdGl2ZToxMDAwcHg7cGVyc3BlY3RpdmU6MTAwMHB4O2Rpc3BsYXk6YmxvY2t9Omhvc3QgLmZsaXBwZXJ7dHJhbnNpdGlvbjouNnM7LXdlYmtpdC10cmFuc2Zvcm0tc3R5bGU6cHJlc2VydmUtM2Q7dHJhbnNmb3JtLXN0eWxlOnByZXNlcnZlLTNkO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7cG9zaXRpb246cmVsYXRpdmV9Omhvc3QgLmJhY2ssOmhvc3QgLmZyb250e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjB9Omhvc3QgLmZyb250e3otaW5kZXg6Mjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGVZKDApO3RyYW5zZm9ybTpyb3RhdGVZKDApfTpob3N0IC5iYWNrey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVkoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlWSgxODBkZWcpfTpob3N0IC5yb3RhdGV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlWSgxODBkZWcpO3RyYW5zZm9ybTpyb3RhdGVZKDE4MGRlZyl9YF0sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIEZsaXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gIH1cclxuXHJcbiAgQFZpZXdDaGlsZCgnZmxpcENvbnRhaW5lcicpIHByaXZhdGUgZmxpcENvbnRhaW5lcjtcclxuICBASW5wdXQoKSBmbGlwOiBib29sZWFuO1xyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMucm90YXRlKCk7XHJcbiAgfVxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZTogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgdGhpcy5yb3RhdGUoKTtcclxuICB9XHJcbiAgcm90YXRlKCkge1xyXG4gICAgaWYgKHRoaXMuZmxpcCkge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZmxpcENvbnRhaW5lci5uYXRpdmVFbGVtZW50LCAncm90YXRlJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZmxpcENvbnRhaW5lci5uYXRpdmVFbGVtZW50LCAncm90YXRlJyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn1cclxuIl19